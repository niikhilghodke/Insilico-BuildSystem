plugins {
    id 'java'
    id 'java-gradle-plugin'
    id 'com.gradle.plugin-publish' version '0.10.0'
}

group 'plugindev'
version '1.0.1'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

pluginBundle {
    website ='https://github.com/niikhilghodke/Insilico-BuildSystem'
    vcsUrl = 'https://github.com/niikhilghodke/Insilico-BuildSystem'
    tags = ['OSGi', 'Equinox']
}

gradlePlugin {
    plugins {
        greetingsPlugin {
            id = 'Insilico.Build.System'
            displayName = 'OSGi Build Plugin'
            description = 'Plugin for defining and aunching Equinox Application'
            implementationClass = 'Insilico.Build.System.CustomExtension'
        }
    }
}

//Practise for extensions

apply plugin: BuildPlugin


Insilico{
    version '1.2.3'
    description 'This will just build a simple osgi application'
    bundle {
        addBundle("org.apache.felix","org.apache.felix.gogo.runtime","1.1.2")
        addBundle("org.apache.felix","org.apache.felix.gogo.shell","1.1.2")
        addBundle("org.apache.felix","org.apache.felix.gogo.command","1.0.0")
        addBundle("org.eclipse.platform","org.eclipse.equinox.console","1.3.100")
        addBundle("org.eclipse.platform","org.eclipse.osgi","3.13.200")
    }
}




//Main plugin class
class BuildPlugin implements Plugin<Project>
{
    void apply (Project project)
    {
        def dest="build/app"
        def exto= project.extensions.create('bundle',Bundle)
        project.task("Insilico"){
            dependsOn 'SetConfiguration'
        }
        project.task('CopyBundles',type:Copy)
                {
                    dependsOn 'SetDependencies'
                    from(project.configurations["archives"])
                    into("build/app")
                }
        project.task("SetDependencies",type:SetDependencies)
                {
                    finalizedBy('build')
                }
        project.task("SetConfiguration",type:WriteConfiguration)
                {
                    dependsOn 'CopyBundles'
                }
    }
}

//Set Dependencies of the required bundles into the project
class SetDependencies extends DefaultTask {

    @TaskAction
    def setDependencies() {
        def ext = project.getExtensions().findByName("bundle")
        
        for(int i=0;i<ext.toBeDownloaded.size();i++)
        {
            project.dependencies{
                //println ext.toBeDownloaded[i].group
                archives group: ext.toBeDownloaded[i].group, name: ext.toBeDownloaded[i].name, version: ext.toBeDownloaded[i].version
            }
        }

        for(int i=0;i<ext.toBeCopied.size();i++)
        {
            project.dependencies{
                archives project.files(ext.toBeCopied[i])
            }
        }

        project.dependencies {
            testCompile group: 'junit', name: 'junit', version: '4.12'
        }

    }
}

// Writes the configuration file
class WriteConfiguration extends DefaultTask {
    @TaskAction
    def setDependencies() {

        // made a directory named configuration if it does not exists
        File a = new File("build/app/configuration")
        def q=a.mkdir()

        //Creating a writer and getting array of bundles in build/app directory
        FileWriter outputFile = new FileWriter(new File("build/app/configuration/config.ini"))
        String bundles= ""
        File app=new File("build/app")
        String[] names=app.list()
        println names


        //getting one string with names of all the bundles
        for(int i=0;i<names.length;i++)
            if(names[i].compareTo("configuration")!=0)
                bundles = bundles.concat(names[i]+"@start,")

        //writting the properties in config.ini
        outputFile.write("eclipse.ignoreApp=true\n")
        outputFile.write("osgi.noShutdown=true\n")
        outputFile.write("osgi.bundles="+bundles)
        outputFile.close()
    }
}

//Used for creating extension for bundles
class Bundle {
    List<String> toBeCopied = new ArrayList<>();
    List<download> toBeDownloaded = new ArrayList<>();

    class download {
        String group;
        String name;
        String version;

        download(String group, String name, String version) {
            this.group = group;
            this.name = name;
            this.version = version;

        }
    }
        void addBundle(String group, String name, String version) {
            this.toBeDownloaded.add(new download(group, name, version));
        }

        void addBundle(String file) {
            this.toBeCopied.add(file);
        }
}

